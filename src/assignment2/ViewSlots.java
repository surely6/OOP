/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NITRO_5
 */
public class ViewSlots extends javax.swing.JFrame {
    private String lecturerName;
    /**
     * Creates new form ViewSlots
     */
    
    public ViewSlots(){
    }
    
    public ViewSlots(String lecturerName) {
        setTitle("View Available Slots with " + lecturerName);
        this.lecturerName = lecturerName;
        initComponents();
        removePastAvailableSlots();
        showAvailableSlots();
    }
    
    void removePastAvailableSlots() {
        StringBuilder validSlots = new StringBuilder();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDate currentDate = LocalDate.now();

        try (BufferedReader availableSlotsReader = new BufferedReader(new FileReader("src\\TextFile\\SlotInfo"))) {
            String line;
            while ((line = availableSlotsReader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length > 1) {
                    LocalDate slotDate = LocalDate.parse(data[3].trim(), dateFormatter);
                    if (!slotDate.isBefore(currentDate)) {
                        validSlots.append(line).append("\n"); //if the slot valid then keep
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("File not found. Please try again.");
        }

    if (validSlots.length() > 0) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("src\\TextFile\\SlotInfo"))) {
            bw.write(validSlots.toString());
        } catch (IOException e) {
            System.out.println("File not found");
        }
    }
}
    
void showAvailableSlots() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); 

    try (BufferedReader availableSlotsReader = new BufferedReader(new FileReader("src\\TextFile\\SlotInfo"));
        BufferedReader bookedSlotsReader = new BufferedReader(new FileReader("src\\TextFile\\SlotInfo - Copy"))) {
        Set<String> bookedSlots = new HashSet<>();
        String line;
        while ((line = bookedSlotsReader.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length > 1) {
                String bookingId = data[1].trim();
                bookedSlots.add(bookingId);
            }
        }

        while ((line = availableSlotsReader.readLine()) != null) {//if slot !booked then read the available slot then add
            String[] data = line.split(",");
            if (data.length > 1 && data[0].trim().equals(lecturerName)) {
                String bookingId = data[1].trim();
                if (!bookedSlots.contains(bookingId)) {
                    String date = data[3].trim();
                    String time = data[2].trim();

                    String formattedTime = time;

                    Object[] rowData = new Object[data.length];
                    System.arraycopy(data, 0, rowData, 0, data.length);
                    rowData[2] = formattedTime;
                    rowData[3] = date;
                    model.addRow(rowData);
                }
            }
        }
    } catch (IOException e) {
            System.out.println("File not found");
    }
}

    private String formatTimeRange(String time){
        return time;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Lecturer Name", "Booking ID", "Time", "Date", "Day", "Venue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("CONFIRM BOOK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel1.setText("View Available Slots");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(336, 336, 336)
                .addComponent(jButton2)
                .addGap(213, 213, 213)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(357, 357, 357))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ViewLecturers vl = new ViewLecturers();
        vl.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        String lecturerName = (String) jTable1.getValueAt(selectedRow, 0);
        String bookingId = (String) jTable1.getValueAt(selectedRow, 1);
        String time = (String) jTable1.getValueAt(selectedRow, 2);
        String date = (String) jTable1.getValueAt(selectedRow, 3);
        String day = (String) jTable1.getValueAt(selectedRow, 4);
        String venue = (String) jTable1.getValueAt(selectedRow, 5);
        
        /*
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\NITRO_5\\OneDrive - Asia Pacific University\\Documents\\NetBeansProjects\\draf\\src\\SL\\Booking.txt", true))) {
            writer.write(lecturerName + "," + bookingId + "," + time + "," + date + "," + day + "," + location + "," + mode + ", Waiting for Lecturer ");
            writer.newLine(); // Add a new line after each booking
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving the booking: " + e.getMessage());
        }
        */
        
        BookConsultation bc = new BookConsultation(lecturerName,bookingId,time,date,day,venue);
        bc.setVisible(true);
        this.dispose();
    } else {
        JOptionPane.showMessageDialog(null, "Please select a slot to book.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
    SwingUtilities.invokeLater(() -> {
            new ViewSlots().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}